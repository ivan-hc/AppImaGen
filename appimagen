#!/usr/bin/env bash

APPIMAGEN_VERSION="3"

# XDG Variables
SCRIPTDIR="${SCRIPTDIR:-$(xdg-user-dir DESKTOP 2>/dev/null)}"
[ -d "$SCRIPTDIR" ] || SCRIPTDIR="$PWD"
export SCRIPTDIR

# Colors
RED='\033[0;31m'
Gold='\033[0;33m'
Green='\033[0;32m'
LightBlue='\033[1;34m'
DIVIDING_LINE="-----------------------------------------------------------------------------"

# Function to check online connections (uses github.com by default, as the database and CLI itself are stored/hosted there)
_online_check() {
	if ! wget -q --tries=10 --timeout=20 --spider https://github.com; then
		printf "\n You are offline, please check your internet connection and try again\n\n"
		exit 0
	fi
}

# Fit texts to an acceptable width
_fit() {
	fold -sw 77 | sed 's/^/ /g'
}

# Help message
help_message="
APPIMAGEN $APPIMAGEN_VERSION

AN INTERACTIVE SCRIPT THAT GENERATES AN APPIMAGE FROM DEBIAN OR UBUNTU LTS

USAGE:	

	appimagen [package1]

EXAMPLES:

	appimagen chromium-browser
	appimagen mpv

OPTIONS:	

	-h/--help	Shows this message
	-v/--version	Shows the version of this script
 
SITE: https://github.com/ivan-hc/AppImaGen
 
THIS SCRIPT IS PART OF https://github.com/ivan-hc/AM
"

case "$1" in
	'-h'|'--help')
		echo "$help_message" | _fit | less -Ir
		;;
	-v|--version)
		echo "$APPIMAGEN_VERSION"
		;;
	*)
		APP="$1"
		# Download the script
		_online_check
		cd "$SCRIPTDIR" || exit 1
		curl -Ls https://raw.githubusercontent.com/ivan-hc/AppImaGen/main/SAMPLE.sh > "$APP"-builder.sh
		sed -i "s/APP=SAMPLE/APP=\"$APP\"/g" "$APP"-builder.sh

		# Add packages
		echo "$DIVIDING_LINE"
		read -r -ep " Add packages (pkg1 pkg2 pkg3...) or leave blank:$(printf "\n\n ")" pkgs
		if [ -n "$pkgs" ]; then
			sed -i "s/packages=\"/packages=\"$pkgs /g" "$APP"-builder.sh
		fi

		# Choose the base distro
		echo "$DIVIDING_LINE"
		read -r -ep " Choose between Debian (default) or Ubuntu (type 2): " response
		if echo "$response" | grep -q "^2"; then
			base_distro="ubuntu"
			sed -i 's/distro="debian"/distro="ubuntu"/g' "$APP"-builder.sh
		else
			base_distro="debian"
		fi

		# Codenames and PPAs
		echo "$DIVIDING_LINE"
		if [ "$base_distro" = "debian" ]; then
			read -r -ep " Add a codename (stable, testing, oldstable...) or leave blank: " codename
			[ -n "$codename" ] && sed -i "s/oldstable/$codename/g" "$APP"-builder.sh
		elif [ "$base_distro" = "ubuntu" ]; then
			read -r -ep " Add a codename (focal, jammy, noble...) or leave blank: " codename
			[ -n "$codename" ] && sed -i "s/oldstable/$codename/g" "$APP"-builder.sh
			echo "$DIVIDING_LINE"
			echo " Do you want to add PPAs?"
			read -r -ep " Add one or more like this 'name/repository' or leave blank:$(printf "\n\n ")" ppas
			if [ -n "$ppas" ]; then
				sed -i "s#ppas=\"#ppas=\"$ppas #g" "$APP"-builder.sh
			fi
		fi

		# Choose if the AppImage should use system libraries
		echo "$DIVIDING_LINE"
		read -r -ep ' Do you wish to include system libraries (y,N)?' syslibraries
		if echo "$syslibraries" | grep -qi "^y"; then
			sed -i "s/^#export/export/g" "$APP"-builder.sh
		fi

		# Run the script
		echo "$DIVIDING_LINE"
		read -r -ep ' Do you want to run the script (y,N)?' appimagenrun
		if echo "$appimagenrun" | grep -qi "^y"; then
			mkdir -p AppImaGen-builds/"$APP" && cp -r "$APP"-builder.sh AppImaGen-builds/"$APP"/ || exit 1
			cd AppImaGen-builds/"$APP" || exit 1
			echo "$DIVIDING_LINE"
			echo " LET'S GO!"
			echo "$DIVIDING_LINE"
			chmod a+x ./"$APP"-builder.sh && ./"$APP"-builder.sh
		fi

		# Test the AppImage
		if test -f ./*AppImage; then
			echo "$DIVIDING_LINE"
			read -r -ep ' Do you want to run the Appimage (y,N)?' appimagerun
			if echo "$appimagerun" | grep -qi "^y"; then
				./*AppImage
			fi
			echo "$DIVIDING_LINE"
		else
			echo "$DIVIDING_LINE"
			echo " No Appimage was created, please check the script"
			echo "$DIVIDING_LINE"
		fi

		;;
esac
